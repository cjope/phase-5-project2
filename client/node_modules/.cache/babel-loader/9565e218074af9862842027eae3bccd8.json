{"ast":null,"code":"var _jsxFileName = \"/home/cjope/Development/code/phase5/project/phase-5-project/client/src/SignUp.js\",\n    _s = $RefreshSig$();\n\n// import { Dialog, DialogContent, DialogTitle, Button } from \"@material-ui/core\";\n// import React, { useState } from \"react\";\n// import UserForm from \"./UserForm\";\n// import { toast, Flip } from \"react-toastify\";\n// function Signup({ setUser }) {\n//   const [firstName, setFirstName] = useState([]);\n//   const [lastName, setLastName] = useState([]);\n//   const [age, setAge] = useState([]);\n//   const [bio, setBio] = useState([]);\n//   const [email, setEmail] = useState([]);\n//   const [username, setUsername] = useState([]);\n//   const [password, setPassword] = useState([]);\n//   const [passwordConfirmation, setPasswordConfirmation] = useState([]);\n//   // const [image, setImage] = useState(null);\n//   const [open, setOpen] = React.useState(false);\n//   const handleClickToOpen = () => {\n//     setOpen(true);\n//   };\n//   const handleToClose = () => {\n//     setOpen(false);\n//   };\n//   function handleSignUp(e) {\n//     e.preventDefault();\n//     const data = new FormData();\n//     data.append(\"username\",username);\n//     data.append(\"first_name\", firstName) \n//     data.append(\"last_name\",lastName)\n//     data.append(\"password\",password)\n//     data.append(\"password_confirmation\",passwordConfirmation)\n//     // data.append(\"image\", image)\n//     data.append(\"age\",age)\n//     data.append(\"bio\",bio)\n//     data.append(\"email\",email)\n//     fetch(\"/signup\", {\n//       method: \"POST\",\n//       body: data,\n//     }).then((r) => {\n//       if (r.ok) {\n//         r.json().then((user) => setUser(user));\n//         handleToClose()\n//       } else {\n//         toast.error(\"please review your information\", {\n//           autoClose: 1000,\n//           hideProgressBar: true,\n//           transition: Flip,\n//           position: \"top-center\"\n//         })\n//       }\n//     })\n//   }\n//   return (\n//     <>\n//       <Button variant=\"outlined\" color=\"primary\" onClick={handleClickToOpen}>\n//         Signup\n//       </Button>\n//       <Dialog open={open} onClose={handleToClose} onSubmit={handleSignUp}>\n//         <DialogTitle>{\"Sign Up\"}</DialogTitle>\n//         <DialogContent>\n//           <div>\n//             <UserForm \n//             setAge={setAge}\n//             setUsername={setUsername}\n//             setEmail={setEmail}\n//             setPassword={setPassword}\n//             setPasswordConfirmation={setPasswordConfirmation}\n//             // setImage={setImage}\n//             setBio={setBio}\n//             setFirstName={setFirstName}\n//             setLastName={setLastName}\n//             // image={image}\n//             />\n//           </div>\n//         </DialogContent>\n//         <Button onClick={handleToClose} color=\"primary\" autoFocus>\n//           Close\n//         </Button>\n//       </Dialog>\n//     </>\n//   );\n// }\n// export default Signup;\nimport React, { useState, useEffect } from 'react';\nimport { Grid } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst genderItems = [{\n  id: 'male',\n  title: 'Male'\n}, {\n  id: 'female',\n  title: 'Female'\n}, {\n  id: 'other',\n  title: 'Other'\n}];\nconst initialFValues = {\n  id: 0,\n  fullName: '',\n  email: '',\n  mobile: '',\n  city: '',\n  gender: 'male',\n  departmentId: '',\n  hireDate: new Date(),\n  isPermanent: false\n};\n\nfunction SignUp() {\n  _s();\n\n  const validate = function () {\n    let fieldValues = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : values;\n    let temp = { ...errors\n    };\n    if ('fullName' in fieldValues) temp.fullName = fieldValues.fullName ? \"\" : \"This field is required.\";\n    if ('email' in fieldValues) temp.email = /$^|.+@.+..+/.test(fieldValues.email) ? \"\" : \"Email is not valid.\";\n    if ('mobile' in fieldValues) temp.mobile = fieldValues.mobile.length > 9 ? \"\" : \"Minimum 10 numbers required.\";\n    if ('departmentId' in fieldValues) temp.departmentId = fieldValues.departmentId.length != 0 ? \"\" : \"This field is required.\";\n    setErrors({ ...temp\n    });\n    if (fieldValues == values) return Object.values(temp).every(x => x == \"\");\n  };\n\n  const {\n    values,\n    setValues,\n    errors,\n    setErrors,\n    handleInputChange,\n    resetForm\n  } = useForm(initialFValues, true, validate);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (validate()) {\n      console.log(values);\n      resetForm();\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Form, {\n    onSubmit: handleSubmit,\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 6,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          name: \"fullName\",\n          label: \"Full Name\",\n          value: values.fullName,\n          onChange: handleInputChange,\n          error: errors.fullName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          label: \"Email\",\n          name: \"email\",\n          value: values.email,\n          onChange: handleInputChange,\n          error: errors.email\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          label: \"Mobile\",\n          name: \"mobile\",\n          value: values.mobile,\n          onChange: handleInputChange,\n          error: errors.mobile\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          label: \"City\",\n          name: \"city\",\n          value: values.city,\n          onChange: handleInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 6,\n        children: [/*#__PURE__*/_jsxDEV(\"radio\", {\n          name: \"gender\",\n          label: \"Gender\",\n          value: values.gender,\n          onChange: handleInputChange,\n          items: genderItems\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            text: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            text: \"Reset\",\n            color: \"default\",\n            onClick: resetForm\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 9\n  }, this);\n}\n\n_s(SignUp, \"XTHBbWbOeNlekdm3mVuS6GGGa5U=\", true);\n\n_c = SignUp;\nexport default SignUp;\n\nvar _c;\n\n$RefreshReg$(_c, \"SignUp\");","map":{"version":3,"sources":["/home/cjope/Development/code/phase5/project/phase-5-project/client/src/SignUp.js"],"names":["React","useState","useEffect","Grid","genderItems","id","title","initialFValues","fullName","email","mobile","city","gender","departmentId","hireDate","Date","isPermanent","SignUp","validate","fieldValues","values","temp","errors","test","length","setErrors","Object","every","x","setValues","handleInputChange","resetForm","useForm","handleSubmit","e","preventDefault","console","log"],"mappings":"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","sourcesContent":["// import { Dialog, DialogContent, DialogTitle, Button } from \"@material-ui/core\";\n// import React, { useState } from \"react\";\n// import UserForm from \"./UserForm\";\n// import { toast, Flip } from \"react-toastify\";\n\n// function Signup({ setUser }) {\n//   const [firstName, setFirstName] = useState([]);\n//   const [lastName, setLastName] = useState([]);\n//   const [age, setAge] = useState([]);\n//   const [bio, setBio] = useState([]);\n//   const [email, setEmail] = useState([]);\n//   const [username, setUsername] = useState([]);\n//   const [password, setPassword] = useState([]);\n//   const [passwordConfirmation, setPasswordConfirmation] = useState([]);\n//   // const [image, setImage] = useState(null);\n//   const [open, setOpen] = React.useState(false);\n\n//   const handleClickToOpen = () => {\n//     setOpen(true);\n//   };\n\n//   const handleToClose = () => {\n//     setOpen(false);\n//   };\n\n//   function handleSignUp(e) {\n//     e.preventDefault();\n//     const data = new FormData();\n//     data.append(\"username\",username);\n//     data.append(\"first_name\", firstName) \n//     data.append(\"last_name\",lastName)\n//     data.append(\"password\",password)\n//     data.append(\"password_confirmation\",passwordConfirmation)\n//     // data.append(\"image\", image)\n//     data.append(\"age\",age)\n//     data.append(\"bio\",bio)\n//     data.append(\"email\",email)\n\n//     fetch(\"/signup\", {\n//       method: \"POST\",\n//       body: data,\n//     }).then((r) => {\n//       if (r.ok) {\n//         r.json().then((user) => setUser(user));\n//         handleToClose()\n//       } else {\n//         toast.error(\"please review your information\", {\n//           autoClose: 1000,\n//           hideProgressBar: true,\n//           transition: Flip,\n//           position: \"top-center\"\n//         })\n//       }\n//     })\n//   }\n\n\n//   return (\n//     <>\n//       <Button variant=\"outlined\" color=\"primary\" onClick={handleClickToOpen}>\n//         Signup\n//       </Button>\n//       <Dialog open={open} onClose={handleToClose} onSubmit={handleSignUp}>\n//         <DialogTitle>{\"Sign Up\"}</DialogTitle>\n//         <DialogContent>\n//           <div>\n//             <UserForm \n//             setAge={setAge}\n//             setUsername={setUsername}\n//             setEmail={setEmail}\n//             setPassword={setPassword}\n//             setPasswordConfirmation={setPasswordConfirmation}\n//             // setImage={setImage}\n//             setBio={setBio}\n//             setFirstName={setFirstName}\n//             setLastName={setLastName}\n//             // image={image}\n//             />\n//           </div>\n//         </DialogContent>\n      \n//         <Button onClick={handleToClose} color=\"primary\" autoFocus>\n//           Close\n//         </Button>\n//       </Dialog>\n//     </>\n//   );\n// }\n// export default Signup;\n\n\n\nimport React, { useState, useEffect } from 'react'\nimport { Grid, } from '@material-ui/core';\n\n\nconst genderItems = [\n    { id: 'male', title: 'Male' },\n    { id: 'female', title: 'Female' },\n    { id: 'other', title: 'Other' },\n]\n\nconst initialFValues = {\n    id: 0,\n    fullName: '',\n    email: '',\n    mobile: '',\n    city: '',\n    gender: 'male',\n    departmentId: '',\n    hireDate: new Date(),\n    isPermanent: false,\n}\n\nfunction SignUp() {\n\n    const validate = (fieldValues = values) => {\n        let temp = { ...errors }\n        if ('fullName' in fieldValues)\n            temp.fullName = fieldValues.fullName ? \"\" : \"This field is required.\"\n        if ('email' in fieldValues)\n            temp.email = (/$^|.+@.+..+/).test(fieldValues.email) ? \"\" : \"Email is not valid.\"\n        if ('mobile' in fieldValues)\n            temp.mobile = fieldValues.mobile.length > 9 ? \"\" : \"Minimum 10 numbers required.\"\n        if ('departmentId' in fieldValues)\n            temp.departmentId = fieldValues.departmentId.length != 0 ? \"\" : \"This field is required.\"\n        setErrors({\n            ...temp\n        })\n\n        if (fieldValues == values)\n            return Object.values(temp).every(x => x == \"\")\n    }\n\n    const {\n        values,\n        setValues,\n        errors,\n        setErrors,\n        handleInputChange,\n        resetForm\n    } = useForm(initialFValues, true, validate);\n\n    const handleSubmit = e => {\n        e.preventDefault()\n        if (validate()){\n            console.log(values)\n            resetForm()\n        }\n    }\n\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Grid container>\n                <Grid item xs={6}>\n                    <input\n                        name=\"fullName\"\n                        label=\"Full Name\"\n                        value={values.fullName}\n                        onChange={handleInputChange}\n                        error={errors.fullName}\n                    />\n                    <input\n                        label=\"Email\"\n                        name=\"email\"\n                        value={values.email}\n                        onChange={handleInputChange}\n                        error={errors.email}\n                    />\n                    <input\n                        label=\"Mobile\"\n                        name=\"mobile\"\n                        value={values.mobile}\n                        onChange={handleInputChange}\n                        error={errors.mobile}\n                    />\n                    <input\n                        label=\"City\"\n                        name=\"city\"\n                        value={values.city}\n                        onChange={handleInputChange}\n                    />\n\n                </Grid>\n                <Grid item xs={6}>\n                    <radio\n                        name=\"gender\"\n                        label=\"Gender\"\n                        value={values.gender}\n                        onChange={handleInputChange}\n                        items={genderItems}\n                    />\n              \n           \n          \n\n                    <div>\n                        <button\n                            type=\"submit\"\n                            text=\"Submit\" />\n                        <button\n                            text=\"Reset\"\n                            color=\"default\"\n                            onClick={resetForm} />\n                    </div>\n                </Grid>\n            </Grid>\n        </Form>\n    )\n}\n\nexport default SignUp"]},"metadata":{},"sourceType":"module"}